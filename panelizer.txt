*****
***** creating truly panel data - getting each failure type into a line in the data
**** 




*set mem 1g



use "H:\JOE\THIN\consults15final3.dta", clear


********************************************************************************
*****************************sensitivity analysis1******************************
********** - use only if specifically coded type1 DM ***************************
*
*gen marker = clusternum if typediab!=1 & case_control==1 
**marker is positive if type of DM is not specifically coded as 1 (only)
**generate totalcluster to fill all empty spaces in the clusternum group
*egen totalcluster = total(marker), by(clusternum)
**then drop those cases and controls with a non-zero totalcluster, and totalcluster
*drop if totalcluster>0
*drop totalcluster
*drop marker
********************************************************************************
*preserve
*collapse age case_control sex BMI, by (id)
*bysort case_control: tab sex
*bysort case_control: sum age, det
*restore



* could drop some variables we don't need...
drop indexevent weight weight_centile height height_centile medcode1 locate1 medcode2 locate2 medcode3 locate3 medcode4 locate4 medcode5 locate5 medcode6 locate6 medcode7 locate7 medcode8 locate8 medcode9 locate9 medcode10 locate10 medcode11 locate11 drug1 drug2 drug3 drug4 drug5 drug6 drug7 drug8 drug16 drug15 drug14 drug13 drug12 drug11 drug10 drug9 testdone1 testdone2 testdone3 testdone4 testdone5 testdone6 testdone7 testdone8 testdone9 testdone10 testdone11 testdone12 testdone13 testdone14 testdone15 testdone16 testdone17 testdone18 testdone19 testdone20 testdone21 testdone22 testdone23 testdone24 testdone25 testdone26 testdone27 testdone28 testdone29 testdone30 testdone31 testdone32 testdone33 testdone34 testdone35 testdone36 testdone37 testdone38 testdone39 testdone40 testdone41 testdone42 testdone43 testdone44 testdone45 testdone46 testdone47 testdone48 testdone49 symptom1 symptom2 symptom3 symptom4 symptom5 symptom6 symptom7 symptom8 symptom9 symptom10 symptom11 age

*NUmerical id:
egen numid =group(id)

****sensitivity analysis 2**********************************************************************************************
*need to generate controls from cases with an indexdate for the kids who are controls so that they are all represented.

***get rid of old controls:
*drop if case_control ==0


*** new indexdate for controls: marker for nearest to a being 365 days before case indexdate
*gen controlindexmarker = indexdate - 365

*need to identify nearest to controlindexmarker within id 
*gen timefrommarker = sqrt((eventdate-controlindexmarker)^2)
*sum timefrommarker
* from 0 to 365

*find nearest to zero within id:
*egen minfrommarker = min(timefrommarker), by(id)
*from 0-365 days

***if there is a consultation within 21 days - use that as an indexdate
***if not, will need to generate one
*** i.e. indexdate becomes the date of the minfrommarker or the date of controlindexmarker if minfrommarker is missing - for events on dates prior to those dates (the new indexdate) i.e. the controls

*** get the minimum event from -365 days if within 21 days...
*gen minmarker =1 if minfrommarker==timefrommarker & timefrommarker<=21
*drop timefrommarker

**Superdate is the date nearest to -365 before indexdate if there is an event within 21 days
**if not then it is indexdate-365 
*gen specialdate = eventdate if minmarker==1
*egen superdate = min(specialdate), by(id)
*replace superdate = controlindexmarker if superdate==.
*format super %td
*drop specialdate


*** make the cases->controls if the events happened before the superdate
*replace case_control=0 if eventdate < superdate

***replace the indexdate for the controls
*replace indexdate = superdate if case_control==0 

*** change the case_id
*replace case_id = id if case_control==0

***change the control ids:
*replace id = "control"+id if case_control==0 

***update the numids
*egen newnumid=group(id)
*replace numid = newnumid
*drop newnumid

***make timebeforeindex accurate for new indexdates, and get rid of events after the index and before the 91 days of the *study period 
*

************************************************************************************************************************
replace timebeforeindex=indexdate-eventdate
drop if timebeforeindex>91
drop if timebeforeindex<0 

*start with 3 month data
drop if timebeforeindex>91 

****generate failtype 1 through 17 as indicator vaiables

gen failtype1x = 1 if facetoface == 1 
gen failtype2x = 1 if OOH == 1 
gen failtype3x = 1 if Phone == 1 
gen failtype4x = 1 if faceAndPhone == 1 
gen failtype5x = 1 if nonadmin == 1 

*codes...
gen failtype6x = 1 if  dkaproxy == 1  
gen failtype7x = 1 if  thirstmarker ==1 
gen failtype8x = 1 if  polyuriamarker ==1 
gen failtype9x = 1 if  weightmarker ==1 
gen failtype10x = 1 if  fatiguemarker ==1 
gen failtype11x = 1 if  abdopmarker ==1 

*all consults
gen failtype12x = 1 if anyconsult==1 

*admin only
gen failtype13x = 1 if anyconsult==1 & nonadmin!=1 

*anyNICE - One or more in a consultation  
gen failtype14x = 1 if NICEcodecount>0  

*any prescription - 
gen failtype15x = 1 if prescription==1  

*admin- prescription
gen failtype16x = 1 if adminscript==1  

*admin - test 
gen failtype17x = 1 if admintest==1 

*replace failtypex with number of events in time period

*get the timeperiod
gen timeperiod1= inrange(timebeforeindex,1,7)
gen timeperiod2= inrange(timebeforeindex,8,14)
gen timeperiod3= inrange(timebeforeindex,15,21)
gen timeperiod4= inrange(timebeforeindex,22,28)
gen timeperiod5= inrange(timebeforeindex,29,35)
gen timeperiod6= inrange(timebeforeindex,36,42)
gen timeperiod7= inrange(timebeforeindex,43,49)
gen timeperiod8= inrange(timebeforeindex,50,56)
gen timeperiod9= inrange(timebeforeindex,57,63)
gen timeperiod10= inrange(timebeforeindex,64,70)
gen timeperiod11= inrange(timebeforeindex,71,77)
gen timeperiod12= inrange(timebeforeindex,78,84)
gen timeperiod13= inrange(timebeforeindex,85,91)


foreach t of numlist 1/13{
	foreach k of numlist 1/17{
bysort id: egen totalfailtype`k'intime`t' = total(failtype`k'x) if timeperiod`t'==1 
replace totalfailtype`k'intime`t' = 0 if totalfailtype`k'intime`t'==.
egen failures`k'time`t' = max(totalfailtype`k'intime`t'), by(numid)
}
}

local outcome = ""
foreach z of numlist 1/17{
	foreach t of numlist 1/13{
if `z' == 1 local outcome = "FaceToFace"
if `z' == 2 local outcome = "OOH"
if `z' == 3 local outcome = "Phone"
if `z' == 4 local outcome = "FaceAndPhone"
if `z' == 5 local outcome = "NonAdmin"
if `z' == 6 local outcome = "DKA"
if `z' == 7 local outcome = "Thirst"
if `z' == 8 local outcome = "Polyuria"
if `z' == 9 local outcome = "Weight"
if `z' == 10 local outcome = "Fatigue"
if `z' == 11 local outcome = "AbdoPain"
if `z' == 12 local outcome = "AnyRecord"
if `z' == 13 local outcome = "Admin"
if `z' == 14 local outcome = "NICE"
if `z' == 15 local outcome = "AnyScript"
if `z' == 16 local outcome = "AdminScript"
if `z' == 17 local outcome = "Test"

rename failures`z'time`t' f`outcome't`t'
}
}

***Now need to replace the duplicates in each time period:

duplicates drop id fAnyRecordt1, force 

drop  failtype* timeperiod* totalfailtype* 

**now reshape to long: 
reshape long fFaceToFacet fOOHt fPhonet fFaceAndPhonet fNonAdmint fDKAt fThirstt fPolyuriat fWeightt fFatiguet fAbdoPaint fAnyRecordt fAdmint fNICEt fAnyScriptt fAdminScriptt fTestt, i(id) j(earlylate)

***now have panel data with earlylate giving time in weeks prior to indexdate 

***Need to generate ngroup to identify clusters:
generate mgroup = id
replace mgroup = case_id if case_control==0 

egen ngroup = group(mgroup)

*Inform stata is panel data, with ngroup as panelvar (the panel variable) remember we are dropping other time periods, so there shouldn't be extras within the id - that can't be the group defining variable! 

xtset ngroup

local c=0
local heading = ""
local filemethod = "replace"

foreach var of varlist fAnyRecordt fAdmint{

foreach i of numlist 1/13{
preserve
keep if earlylate==`i'
capture xtpoisson `var' case_control, irr iter(30) 
display e(chi2_c)
disp chiprob(1, e(chi2_c))*0.5 
estadd scalar palpha = chiprob(1, e(chi2_c))*0.5, replace
eststo, addscalars(errorcode _rc, replace)
display _rc

drop if `var' ==0
if `c' >0{
	local filemethod = "append"
	local heading =  "h1(nil) h2(nil) h3(nil)"
	}
	la var `var' "Children with number of `var' failures"
	la def failure 1 "1 failure in week-`i'" 2 "2 failures in week-`i'" 3 "3 failures in week-`i'" 4 "4 failures in week-`i'" 5 "5 failures in week-`i'" 6 "6 failures in week-`i'" 7 "7 failures in week-`i'"
	la val `var' failure
	capture tabout `var' case_control using H:\JOE\THIN\outputs\panelized`var'.tsv , cells(freq) `heading' `filemethod'  
local c=`c'+1 
restore
}


estout using H:\JOE\THIN\outputs\panelized`var'.tsv,  eform drop(_cons) cells( b ci_l(fmt(3)) ci_u(fmt(3)) p(fmt(4))) stats(palpha errorcode) legend append
eststo clear
}

****any unaccounted for admins?
gen missing = 0
replace missing =1 if fAdmint==1
replace missing =0 if fAdminScriptt==1
replace missing =0 if fTestt==1



***********
*********** 