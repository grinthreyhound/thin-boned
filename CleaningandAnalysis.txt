//Stata file for cleaning and analysing the sense checked THIN data in H:\JOE\THIN\all15wide_old.dta

//stata 11 set memory: 
set memory 1g

use "H:\JOE\THIN\all15wide_old.dta", clear

//sort out z scores
//for centiles need to use age at time of weighing Must install zanthro if not already done
//need height in cm
generate weightage = eventdate-dob if weight!=.
replace weightage = weightage/365.25
generate heightage = eventdate-dob if height!=.
replace heightage = heightage/365.25
replace height = height*100 if height<2
replace height =. if height<40

egen heightzanthro = zanthro(height,ha,UK), xvar(heightage) gender(sex) gencode(male=1, female=2)

egen weightzanthro = zanthro(weight,wa,UK), xvar(weightage) gender(sex) gencode(male=1, female=2)

//sort out BMI = weight/height in m squared
drop BMI
gen BMI = weight/(height/100)^2

egen BMIzanthro = zanthro(BMI,ba,UK), xvar(weightage) gender(sex) gencode(male=1, female=2)


//initially we are going to perform the analysis dropping cases with a record of 
//t2dm or metformin etc rx without insulin
//will also need to drop the controls as well

//Therefore need to drop typediab==2 && 9
//also typebymed==2

//create new variable cluster to identify cases and controls in same matched cluster
gen cluster = case_id if case_control==0 
replace cluster = id if case_control==1
egen clusternum = group(cluster)
//clusternum is now an integer cluster marker

gen marker = clusternum if typediab==2 | typediab==9 | typebymed==2
// marker is positive if type of DM is 2 ever or metformin rx and no insulin
// generate totalcluster to fill all empty spaces in the clusternum group
egen totalcluster = total(marker), by(clusternum)
//then drop those cases and controls with a non-zero totalcluster, and totalcluster
drop if totalcluster>0
drop totalcluster
drop marker
******************************************************************************

//now can start filling out the results table: 

//get details of population:
preserve
collapse age sex dob case_control BMI BMIzanthro typediab typebymed, by(id)
codebook case_control
//1926 cases and 7704 controls
sum age if case_con==1, d
sum age if case_con==0, d
//Just under 10 is median

tab sex case_cont, col
//53% Male both cases and controls

tab typediab case_con, col
tab typebymed case_con, col

bysort case_cont: sum BMI
bysort case_cont: sum BMIzanthro
restore

// consultations in prev 1, 3 and 12 months

//sort out time to be indexed at last known consultation
**********************************************************************

//Need to change the case indexdate to include those consultations where the doctor was clearly thinking of diabetes.
//This is to reduce biases due to recording delay
//look at the symptom codes:

/* 
preserve
egen symptgroup = group(symptom1)
sort symptgroup
by symptgroup: gen symptfreq = _N
sort symptfreq symptom1

tab symptom1 case_cont, col 
restore


//and look at the tests done:
preserve
foreach i of numlist 1/49{
egen testgroup`i' = group(testdone`i')
sort testgroup`i'
by testgroup`i': gen testfreq`i' = _N
sort testfreq`i' testdone`i'

tab testdone`i' case_cont, col
}
restore

*/

//list of codes indicative that GP knows it is diabetes: 

gen marker = 0
// look at the obvious ones and mark the consultation where they occurred:
foreach var of varlist symptom1 symptom2 symptom3 symptom4 symptom5 symptom6 symptom7 symptom8 symptom9 symptom10 symptom11{
replace marker = 1 if `var'== "glycosuria"
replace marker = 1 if `var'== "glycaemia test"
replace marker = 1 if `var'== "hyperglycaemia"
replace marker = 1 if `var'== "hypoglycaemia"
replace marker = 1 if `var'== "urine glucose test"
replace marker = 1 if `var'== "impaired glucose tole"
replace marker = 1 if `var'== "ketonuria"
replace marker = 1 if `var'== "thirst"
}

foreach i of numlist 1/49{
replace marker = 1 if testdone`i' == "Fasting glucose"
replace marker = 1 if testdone`i' == "Glucose Tolerance tes"
replace marker = 1 if testdone`i' == "Hb A1C - Diabetic con"
replace marker = 1 if testdone`i' == "Urinalysis - Glucose"
replace marker = 1 if testdone`i' == "Urine dipstick for gl"
replace marker = 1 if testdone`i' == "Urine dipstick for ke"
replace marker = 1 if testdone`i' == "Blood glucose"
replace marker = 1 if testdone`i' == "Blood gases"
replace marker = 1 if testdone`i' == "Serum osmolality"
replace marker = 1 if testdone`i' == "Urine Biochemistry"
replace marker = 1 if testdone`i' == "Diabetes annual check"
replace marker = 1 if testdone`i' == "Diabetes current stat"
}


//need to decide a cut-off: Allow 21 days as this is our timeframe shift. get rid of -ve ones

replace marker = 0 if markertime>21
replace marker = 0 if markertime<1 
//changes only for cases, 
replace marker = 0 if case_cont==0 

//get the time that these took place at: 
gen markertime = indexdate-eventdate if marker==1 

twoway hist markertime, by(case_cont)
//most of the events are around the indexdate. //large majority within 2 weeks

//now change indexdates to be largest value of markertime within id of cases 

//but only if marker is +ve!
********************************May need to examine the records!

egen newcaseindex = min(eventdate)  if marker==1, by(id)
egen newcaseindexfull = min(newcaseindex), by(id)

//now can replace indexdate with earliest possible mention of diabetes. 
replace newcaseindex = -99 if newcaseindex==.
replace indexdate = newcaseindex if newcaseindex>0 


//need to now sort out the indexdates for the controls. 
//reset indexdate to be lasttime is not enough - This needs to be more sophisticated
//need to get it so that dm not sliding into frame of ref for cases
//not lasttime but nearest one to indexdate for controls and indexdate for cases

gen timebeforeindex = indexdate-eventdate
sum timebeforeindex
//from 457 to -30

//need to identify nearest to zero within id for controls
//make negatives positive:
gen timefromindex = sqrt(timebeforeindex*timebeforeindex)
// from 0 to 457


//find nearest to zero within id:
egen minfromcase = min(timefromindex), by(id)
//from 0-21 days

//make indexdate = date with min time difference from indexdate for controls only

gen newcontrolindex = eventdate if timefromindex==minfromcase & case_control==0

egen bestindexdate = min(newcontrolindex) if case_con==0, by(id) 

replace indexdate = bestindexdate if case_control ==0
drop newcontrolindex bestindexdate minfromcase

replace timebeforeindex = indexdate-eventdate
sum timebeforeindex
//from -43 to 478 - i.e. the 21 days either side of the original indexdate plus the indexdate
//so for some of them the indexdate has moved to the earliest date, but thy still have records 6 weeks later
//these must be removed at this point. 

drop if timebeforeindex <0 



list id timebeforeindex if symptom1=="diabetes"  ///there is an error in the indexing for some cases

************************************************************************



//look at codes for: Thirst/polydipsia Polyuria Weight loss Fatigue Abdominal pain
//in last 2 weeks

preserve
drop if timebeforeindex >14
drop if timebeforeindex <1

egen symptgroup = group(symptom1)
sort symptgroup
by symptgroup: gen symptfreq = _N
sort symptfreq symptom1

tab symptom1 case_cont, col 

list id if symptgroup ==diabetes



preserve
drop if timebeforeindex > 30
gen marker = 1
egen attendances1m = total(marker), by(id)
collapse attendances1m case_cont, by (id)
bysort case_cont: sum attendances1m, d
restore

preserve
drop if timebeforeindex > 91
gen marker = 1
egen attendances3m = total(marker), by(id)
collapse attendances3m case_cont, by (id)
bysort case_cont: sum attendances3m, d
restore

preserve
drop if timebeforeindex > 365
gen marker = 1
egen attendances12m = total(marker), by(id)
collapse attendances12m case_cont, by (id)
bysort case_cont: sum attendances12m, d
restore











